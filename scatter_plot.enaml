# -*- coding: utf-8 -*-
"""
Created on Fri Aug 28 16:04:53 2015

@author: adam
"""

from enaml.qt import QtCore, QtGui
from enaml.widgets.api import *
from enaml.layout.api import hbox

import pyqtgraph as pg

import pyqtgraph.opengl as gl

from enaml.core.declarative import d_
from atom.api import Event, observe, List,Instance

from pylab import *

class ScatterPlot(RawWidget):
    '''

    '''
    
    x = d_(List())
    y = d_(List())
    c = d_(List())
    
    colormap = pg.ColorMap(pos = np.array([0., 0.5, 1.]),
                           color = np.array([[0,255,255,255],[255,0,0,255],[0,0,255,255]], dtype=np.ubyte))

    plot = Instance(pg.ScatterPlotItem)
    
    def create_widget(self, parent):
        ''' 
        Create the toolkit widget for the control.

        This method should create and initialize the widget.

        Parameters
        ----------
        parent : toolkit widget or None
            The parent toolkit widget for the control.

        Returns
        -------
        result : toolkit widget
            The toolkit specific widget for the control.

        '''
        
        #create the widget
        w = pg.GraphicsLayoutWidget(parent)
        
        p = w.addViewBox()
        
        self.plot = pg.ScatterPlotItem()
        
        self.update_data()
        
        p.addItem(self.plot)

        w.setMinimumSize(300, 300)
        
        return w
    
    @observe('x','y','c')
    def update_data(self,*args):
        '''
        Updates the plot when data change
        '''
        self.plot.setData(x=self.x,
                          y=self.y,
                          size=10,
                          brush=[pg.mkBrush(el) for el in self.colormap.map(self.c)],
                          symbol='s')
                          
enamldef Main(MainWindow):
    Container:
        ScatterPlot: plot:
            x = rand(1000).tolist()
            y = rand(1000).tolist()
            c = rand(1000).tolist()
